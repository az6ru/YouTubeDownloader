## Описание проекта: Веб-сервис для скачивания видео с YouTube

Веб-сервис предоставляет пользователям удобный интерфейс для загрузки видео и аудио с различных онлайн-площадок (YouTube). В основе функционала лежит утилита yt-dlp, интегрированная через backend-слой. Пользователь вводит ссылку на видео, выбирает формат и качество, после чего получает прямую ссылку на скачивание файла или само скачивание файла.

## 2. Целевая аудитория

- Обычные пользователи, желающие загрузить видео для личных целей.
- Контент-мейкеры, которым необходимо быстро получать исходники из различных источников.
- Маркетологи и журналисты, которым нужно оперативно иметь локальные копии медиа.

## 3. Основные функции

### Описание проекта: Веб-сервис для скачивания видео с YouTube

### Основные компоненты системы:

**Серверная часть (Backend):**

- **Flask + SocketIO:** Обеспечивает real-time обновления прогресса загрузки.
- **SQLAlchemy:** Используется для работы с базой данных.
- **yt-dlp:** Основной инструмент для скачивания видео.
- **Поддержка различных форматов и качества видео.**
- **Система очистки временных файлов:** Автоматическое удаление файлов через заданный период.

**База данных:**

- **Таблица Download:** Отслеживает историю загрузок.

**Основной функционал:**

- Валидация URL видео.
- Извлечение информации о видео (название, превью, длительность).
- Выбор качества и формата.
- Progress bar с отображением скорости загрузки.
- Поддержка аудио-форматов.
- Автоматическая конвертация в оптимальные форматы.

### Административная панель:

- Управление поддерживаемыми функциями.
- Настройка SEO-параметров.

### Особенности:

- Real-time обновления через WebSocket.
- Оптимизированная обработка больших файлов.
- Временное хранение с автоочисткой через 24 часа.
- Поддержка многопоточной загрузки.
- Обработка ошибок и информативные сообщения.

### Безопасность:

- Валидация входных данных.
- Защита от перегрузки сервера.
- Ограничение размера загружаемых файлов.
- Безопасное хранение конфигурации через переменные окружения.

---

### Пользовательский интерфейс

### Главная страница:

- Заголовок: **"Скачать видео из YouTube".**
- Поле для ввода ссылки на видео.
- Кнопка: **"Проверить".**

### Процесс использования:

1. **После вставки ссылки и нажатия "Проверить":**
    - Система проверяет валидность ссылки.
    - Загружает информацию о видео (название, превью, длительность, автор).
    - Показывает карточку с информацией о видео.
    - Отображает доступные форматы скачивания в выпадающем списке:
        - **4K (2160p)** • *452.7 МБ*
        - **2K (1440p)** • *256.3 МБ*
        - **FullHD (1080p)** • *128.4 МБ*
        - **HD (720p)** • *81.2 МБ*
        - **SD (480p)** • *53.5 МБ*
        - **MP3 (128kbps)** • *23.1 МБ*
2. **После выбора формата:**
    - Пользователь нажимает кнопку **"Получить ссылку".**
    - Появляется прогресс-бар, показывающий процесс загрузки.
    - Отображается скорость загрузки и оставшееся время.
3. **По завершении загрузки:**
    - Появляется ссылка для скачивания файла.

### Макет карточки видео:

- **Изображение превью видео:** Размещено в верхней части карточки.
- **Название видео:** Чёткий и крупный заголовок, выделенный жирным шрифтом.
- **Автор:** Имя автора с пометкой.
- **Длительность видео:** Отображается под автором.
- **Дополнительная информация:** Краткое описание или основные моменты видео.
- **Выбор формата:** Выпадающий список с доступными вариантами качества.
- **Кнопка загрузки:** Чёрная кнопка с текстом "Получить ссылку".
- **Прогресс загрузки:** Показывает скорость загрузки и статус выполнения.

### Обработка форматов:

**Определение типа загрузки:**

- `is_audio_only = 'audio' in self.format_id.lower()`

**Если запрошено только аудио:**

- Формат: `'bestaudio'`
- Постпроцессор настроен на извлечение аудио:
    
    ```python
    postprocessors = [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'mp3',
        'preferredquality': '192'
    }]
    
    ```
    

**Если запрошено видео:**

- Формат: `{format_id}+bestaudio/best` — скачивает видео в выбранном качестве и лучшее доступное аудио.
- Постпроцессор настроен на ремукс в MP4:
    
    ```python
    postprocessors = [{
        'key': 'FFmpegVideoRemuxer',
        'preferedformat': 'mp4'
    }]
    
    ```
    

**Общие параметры постобработки:**

- Сохранение метаданных (главы, таймстемпы).
- Принудительная перезапись существующих файлов.
- Использование FFmpeg для склейки.

**Процесс склейки:**

- `yt-dlp` автоматически скачивает видео и аудио потоки отдельно.
- FFmpeg объединяет потоки без перекодирования.
- Сохраняются все метаданные оригинала.
- Результат сохраняется в MP4 контейнере.

Эта система позволяет получить оптимальное качество при минимальной нагрузке на сервер, так как не требуется перекодирование.

### Получение форматов:

**Процесс получения форматов:**

- После вставки URL вызывается `/api/validate` с параметром `formats_only=True`.
- `yt-dlp` извлекает информацию о видео и доступных форматах.

**Обработка форматов:**

- Для каждого формата собирается информация:
    - `format_id` — уникальный идентификатор.
    - `ext` — расширение файла.
    - `resolution` — разрешение.
    - `filesize` — размер файла.
    - `vcodec/acodec` — кодеки.
    - `tbr/abr` — битрейты.

**Группировка форматов (функция group_formats):**

- Форматы распределяются по группам на основе разрешения:
    - **4K (2160p)**
    - **2K (1440p)**
    - **FullHD (1080p)**
    - **HD (720p)**
    - **SD (480p)**
    - **Audio (MP3)**
- В каждой группе оставляется только лучший формат.
- Для видео форматов добавляется размер аудио потока.

**Отображение в интерфейсе:**

- Форматы выводятся в `select` элемент в порядке убывания качества.
- При выборе формата его `format_id` сохраняется для последующей загрузки.

### Процесс скачивания:

**Создание задачи на скачивание:**

- При получении POST-запроса на `/api/download` с URL и выбранным форматом:
    - Генерируется уникальный `download_id` через `uuid4`.
    - Создаётся папка для загрузки в директории `TEMP_DIR/download_id`.
    - Инициализируется `VideoDownloader` с параметрами `url`, `format_id`, `download_path`.
    - Задача добавляется в словарь `active_downloads` с временем истечения 24 часа.
    - Запускается поток скачивания через `downloader.start()`.

**Процесс скачивания:**

- `VideoDownloader` запускается в отдельном потоке.
- Определяется тип скачивания (аудио/видео) на основе `format_id`.
- Настраиваются параметры для `yt-dlp`:
    - Формат видео + аудио или только аудио.
    - Выходной путь с разрешением.
    - Постпроцессоры для обработки.
- Начинается скачивание через `yt-dlp`.
- Прогресс отправляется через WebSocket: